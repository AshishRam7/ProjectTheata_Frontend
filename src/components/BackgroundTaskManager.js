// FILE: watninja68-projecttheata_frontend/src/components/BackgroundTaskManager.js
// --- Updated File Content ---
import React, { useState } from 'react';
import './BackgroundTaskManager.css'; 
import { useAuth } from '../hooks/useAuth'; // Import useAuth to get user ID

const BackgroundTaskManager = () => {
    const [taskQuery, setTaskQuery] = useState(''); // Renamed from parameters, now a simple string
    const [results, setResults] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState(null);
    const { user } = useAuth(); // Get the authenticated user

    const handleExecuteTask = async () => {
        if (!taskQuery.trim()) {
            setError('Please enter a query for the task.');
            return;
        }
        setIsLoading(true);
        setError(null);
        setResults(null);

        try {
            // Go backend is on localhost:8080
            const response = await fetch('http://localhost:8080/api/tasks/execute', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    task_query: taskQuery, // Send the natural language query
                    user_id: user ? user.id : "anonymous_task_user", // Include user_id
                    // session_id for the task can be generated by the backend
                    // or passed if you have a relevant session concept for tasks
                }),
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || `Task execution failed with status ${response.status}`);
            }
            setResults(data);
            setTaskQuery(''); // Clear input after successful execution
        } catch (err) {
            console.error("Error executing task:", err);
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="background-task-manager">
            <h4>Background Task (via ADK Agent)</h4>
            <div className="task-form">
                <div className="form-group">
                    <label htmlFor="taskQuery">Describe the task:</label>
                    <input
                        type="text"
                        id="taskQuery"
                        placeholder="e.g., Summarize the last meeting"
                        value={taskQuery}
                        onChange={(e) => setTaskQuery(e.target.value)}
                        className="task-query-input" // Added class for potential specific styling
                    />
                    <small>
                        Your query will be sent to the agent to determine the best course of action.
                    </small>
                </div>
                <button onClick={handleExecuteTask} disabled={isLoading || !taskQuery.trim()}>
                    {isLoading ? 'Executing...' : 'Execute Task'}
                </button>
            </div>

            {error && <div className="task-error">Error: {error}</div>}
            
            {results && (
                <div className="task-results">
                    <h5>Task Results:</h5>
                    <pre>{JSON.stringify(results, null, 2)}</pre>
                </div>
            )}
        </div>
    );
};

export default BackgroundTaskManager;